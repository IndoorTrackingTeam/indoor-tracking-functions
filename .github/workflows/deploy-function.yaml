name: Build deploy PROD

on:
  workflow_dispatch:
    inputs:
      manual_deploy:
        description: "Manual Deploy"
        required: true
        type: boolean
        default: true
  push:
    branches:
      - main

env:
  IMAGE: trigger-update-location
  MEMORY: 512Mi
  TIMEOUT: 300
  REGION: us-east1
  DB_NAME: ${{ secrets.DB_NAME }}
  DB_URL: ${{ secrets.DB_URL }}
  MAIL_USERNAME: ${{ secrets.MAIL_USERNAME }}
  MAIL_PASSWORD: ${{ secrets.MAIL_PASSWORD }}
  MAIL_FROM: ${{ secrets.MAIL_FROM }}
  MAIL_PORT: ${{ secrets.MAIL_PORT }}
  MAIL_SERVER: ${{ secrets.MAIL_SERVER }}

jobs:
  test: 
    name: Unit Tests
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Unit tests with pytest
      run: |
        cd functions
        pytest -vv --cov=functions --cov-report=xml --cov-report=html

    - name: Upload HTML report
      uses: actions/upload-artifact@v3
      with:
        name: pytest_html_report
        path: pytest_html_report.html

    - name: Upload HTML coverage report
      uses: actions/upload-artifact@v3
      with:
        name: html-coverage-report
        path: htmlcov/

  deploy:
    name: Build, Publish and Deploy
    needs: test
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - id: 'auth'
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Use gcloud CLI
        run: gcloud info

      - name: Login to GCR
        uses: docker/login-action@v1
        with:
          registry: gcr.io
          username: _json_key
          password: ${{ secrets.GCP_SA_KEY }}

      - name: Docker configuration
        run: |-
          gcloud auth configure-docker us-east1-docker.pkg.dev

      - name: Build Docker Image
        run: |-
          docker build \
            --tag "us-east1-docker.pkg.dev/${{ secrets.GCP_PROJECT }}/ar-backend/${{ env.IMAGE }}-prod:latest" \
            ./

      - name: Publish Docker Image to Artifact Registry
        run: |-
          docker push "us-east1-docker.pkg.dev/${{ secrets.GCP_PROJECT }}/ar-backend/${{ env.IMAGE }}-prod:latest"

      - name: Deploy Cloud Run Job
        run: |-
          gcloud run jobs deploy trigger-update-location-job \
            --image "us-east1-docker.pkg.dev/${{ secrets.GCP_PROJECT }}/ar-backend/${{ env.IMAGE }}-prod:latest" \
            --memory $MEMORY \
            --region $REGION \
            --max-retries 3 \
            --task-timeout $TIMEOUT \
            --set-env-vars=DB_NAME=$DB_NAME \
            --set-env-vars=DB_URL=$DB_URL
            --set-env-vars=MAIL_USERNAME=$MAIL_USERNAME \
            --set-env-vars=MAIL_PASSWORD=$MAIL_PASSWORD \
            --set-env-vars=MAIL_FROM=$MAIL_FROM \
            --set-env-vars=MAIL_PORT=$MAIL_PORT \
            --set-env-vars=MAIL_SERVER=$MAIL_SERVER 

      - name: Create Cloud Scheduler Job
        run: |
          gcloud scheduler jobs create http my-scheduler-job \
            --schedule "*/5 * * * *" \
            --uri "https://us-east1-run.googleapis.com/apis/run.googleapis.com/v1/namespaces/${{ secrets.GCP_PROJECT }}/jobs/trigger-update-location-job:run" \
            --http-method POST \
            --oauth-service-account-email ${{ secrets.SA_EMAIL }} \
            --time-zone "America/Sao_Paulo" \
            --location us-east1 \
          || echo "Scheduler already exists, updating it..."

      - name: Update Cloud Scheduler Job (if exists)
        run: |
          gcloud scheduler jobs update http my-scheduler-job \
            --schedule "*/5 * * * *" \
            --uri "https://us-east1-run.googleapis.com/apis/run.googleapis.com/v1/namespaces/${{ secrets.GCP_PROJECT }}/jobs/trigger-update-location-job:run" \
            --http-method POST \
            --oauth-service-account-email ${{ secrets.SA_EMAIL }} \
            --location us-east1 \
            --time-zone "America/Sao_Paulo"
